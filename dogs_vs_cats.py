# -*- coding: utf-8 -*-
"""Dogs vs Cats.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yLZZ9CIn1oI5QMC46QwoiZ_6fx40ieRp

# Phân loại ảnh chó/mèo sử dụng CNN
Mô tả tập dữ liệu:
- Tập dữ liệu huấn luyện bao gồm 25000 bức ảnh chó và mèo.
- Mục đích: gán nhãn cho các bức ảnh trong tập dữ liệu test1 (12500 hình ảnh).
- Nguồn: https://www.kaggle.com/c/dogs-vs-cats

### 1. Import thư viện
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split

import random
import zipfile

"""### 2. Tiền xử lí dữ liệu"""

dataset_label = ["cat", "dog"]

dataset_x = []
dataset_y = []

zip_path = "/content/train.zip"
archive = zipfile.ZipFile(zip_path, "r")
file_names = archive.namelist()
file_names.remove(file_names[0])

for file_name in file_names:
  img_file = archive.open(file_name)
  img_data = img_file.read()
  img = tf.image.decode_jpeg(img_data, channels=3)
  img = tf.image.resize(img, [128, 128])
  img = tf.cast(img, tf.uint8)
  img_array = np.array(img)
  dataset_x.append(img_array)
  img_file.close()

  if "cat" in file_name:
    dataset_y.append(0)
  else:
    dataset_y.append(1)

dataset_x = np.array(dataset_x)
dataset_y = np.array(dataset_y)
print(dataset_x.shape)
print(dataset_y.shape)

pic = random.randint(0, len(dataset_x))
plt.imshow(dataset_x[pic])
plt.title(dataset_label[dataset_y[pic]])
plt.show()

def plot_data(x, y=None, predict=None):
  nrows, ncols = 2, 5
  fig, axs = plt.subplots(nrows=nrows, ncols=ncols, figsize=(8, 4))
  len_x = x.shape[0]

  for idx in range(nrows * ncols):
    # Get random img to plot
    img_idx = random.randint(0, len_x)

    # Set title
    img_title = ""
    if y is not None:
      img_title += f"Label: {dataset_label[y[img_idx]]}\n"
    if predict is not None:
      img_title += f"Predict: {dataset_label[np.argmax(predict[img_idx])]}\n"

    # Plot
    ax = axs[idx // ncols, idx % ncols]
    ax.set(xticks=[], yticks=[])
    ax.imshow(x[img_idx])
    ax.set_xlabel(img_title, fontsize=12)

  plt.tight_layout()
  plt.show()

plot_data(dataset_x, dataset_y)

x_train, x_test, y_train, y_test = train_test_split(dataset_x, dataset_y, test_size=0.2, random_state=1)

x_train_cnn = np.expand_dims(x_train, axis=-1)
x_test_cnn = np.expand_dims(x_test, axis=-1)
print(x_train_cnn.shape)
y_train_cnn = tf.keras.utils.to_categorical(y_train, len(dataset_label))
y_test_cnn = tf.keras.utils.to_categorical(y_test, len(dataset_label))
print(y_train_cnn[0])

"""### 3. Model

- Xây dựng mô hình
"""

model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=[128, 128, 3]),
    tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), activation="relu", padding="same"),
    tf.keras.layers.MaxPooling2D(pool_size=(4, 4)),
    tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation="relu", padding="same"),
    tf.keras.layers.MaxPooling2D(pool_size=(4, 4)),
    tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), activation="relu", padding="same"),
    tf.keras.layers.MaxPooling2D(pool_size=(4, 4)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation="relu"),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(2, activation="softmax")
])

model.summary()

model.compile(loss="categorical_crossentropy",
              optimizer="adam",
              metrics=["accuracy"])

"""- Training"""

epochs = 20
batch_size = 128
train_model = model.fit(x_train_cnn,
                        y_train_cnn,
                        epochs=epochs,
                        batch_size=batch_size,
                        validation_split=0.1,
                        )

"""- Đánh giá"""

score = model.evaluate(x_test_cnn, y_test_cnn, verbose=0)
print("Test accuracy:", score[1])
print("Test loss:", score[0])

predict = model.predict(x_test_cnn)

plot_data(x_test, y_test, predict)

"""- Save model"""

model.save("/content/mymodel.keras")

model = tf.keras.models.load_model("/content/mymodel.keras")

"""- Kiểm tra phân loại 1 số bức hình ngoài"""

def test(img_path):
  file = open(img_path, "rb")
  img_data = file.read()
  img = tf.image.decode_jpeg(img_data, channels=3)
  img = tf.image.resize(img, [128, 128])
  img = tf.cast(img, tf.uint8)
  img_array = np.array(img)
  file.close()

  img_input = np.expand_dims(img_array, axis=-1)
  img_input = np.expand_dims(img_input, axis=0)
  predict = np.argmax(model.predict(img_input)[0])

  plt.imshow(img_array)
  plt.title(dataset_label[predict])
  plt.tight_layout()
  plt.show()

test("/content/6.jpg")

"""### 4. Gán nhãn cho tập test1"""

testset_x = []

zip_path = "/content/test1.zip"
archive = zipfile.ZipFile(zip_path, "r")
file_names = archive.namelist()
file_names.remove(file_names[0])

for file_name in file_names:
  img_file = archive.open(file_name)
  img_data = img_file.read()
  img = tf.image.decode_jpeg(img_data, channels=3)
  img = tf.image.resize(img, [128, 128])
  img = tf.cast(img, tf.uint8)
  img_array = np.array(img)
  testset_x.append(img_array)
  img_file.close()

testset_x = np.array(testset_x)
print(testset_x.shape)

testset_x_cnn = np.expand_dims(testset_x, axis=-1)
print(testset_x_cnn.shape)

test_predict = model.predict(testset_x_cnn)

plot_data(testset_x, predict=test_predict)

result = []
for i in range(len(test_predict)):
  result.append(np.argmax(test_predict[i]))
df = {
    "id": range(1, len(result) + 1),
    "label": result
}
pd.DataFrame(df).to_csv("/content/submission.csv", index=False, header=True)